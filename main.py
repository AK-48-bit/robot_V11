# -*- coding: utf-8 -*-
import math
# Form implementation generated from reading ui file 'D:\papa.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys  # sys нужен для передачи argv в QApplication
import time

from PyQt5 import QtGui, QtWidgets
from qt_material import apply_stylesheet
import script
from functools import partial
import Robot
import fd  # Cделать смну темы?
from script import Coordinate

robot = Robot.RPC('192.168.11.10')
ytu = ""
Styles = ['dark_amber.xml',
          'dark_blue.xml',
          'dark_cyan.xml',
          'dark_lightgreen.xml',
          'dark_pink.xml',
          'dark_purple.xml',
          'dark_red.xml',
          'dark_teal.xml',
          'dark_yellow.xml',
          'light_amber.xml',
          'light_blue.xml',
          'light_cyan.xml',
          'light_cyan_500.xml',
          'light_lightgreen.xml',
          'light_pink.xml',
          'light_purple.xml',
          'light_red.xml',
          'light_teal.xml',
          'light_yellow.xml']
d = 0


def b():
    print("b")


def smentema():
    global app
    global d
    global ytu
    global Styles
    d += 1
    d = d % (len(Styles) - 1)
    apply_stylesheet(app, theme=Styles[d])


ind = None
rr, rr_metric = "", ""


def gg(t):
    global app
    global ytu
    ytu = t[:-4]
    apply_stylesheet(app, t)


class ExampleApp(QtWidgets.QMainWindow, fd.Ui_MainWindow):
    def __init__(self):
        # Это здесь нужно для доступа к переменным, методам
        # и т.д. в файле design.py
        super().__init__()
        self.setupUi(self)
        self.setFixedSize(1575, 900)
        # self.onewerh.setText("ROMA") #->Изменить текст в поле для кординат руки
        # self.onecucember.isSelected() #
        # self.dvish = QtWidgets.QAction("Начать двиение", self) #создание кнопки в тулбаре
        # self.dvish.triggered.connect(b) #обрабокта нажатие кнопки в тулбаре
        # self.menubar.addAction(self.dvish) #добвление кнопки в тулбар
        # pix=QtGui.QPixmap("in_memory_to_disk.png") #создание пикс мэпа для фоткии загружаем с диска
        # self.imageoutput.setPixmap(pix) #смена изображени

        self.twob.clicked.connect(rashet)
        self.twob_2.clicked.connect(get_foto)

        # self.onecucember0 = QtWidgets.QListWidgetItem("0")
        # self.cucembers.addItem(self.onecucember)
        # self.onecucember=QtWidgets.QListWidgetItem("Первый огурец")
        # self.cucembers.addItem(self.onecucember)
        # #self.onecucember1 = QtWidgets.QListWidgetItem("1")
        # #self.cucembers.addItem(self.onecucember1)
        # self.twocucember=QtWidgets.QListWidgetItem("Второй огурец")
        # self.cucembers.addItem(self.twocucember)
        # #self.onecucember2 = QtWidgets.QListWidgetItem("2")
        # #self.cucembers.addItem(self.onecucember2)
        # self.treecucember=QtWidgets.QListWidgetItem("Третий огурец")
        # self.cucembers.addItem(self.treecucember)
        # #self.onecucember3 = QtWidgets.QListWidgetItem("3")
        # #self.cucembers.addItem(self.onecucember3)
        # self.fourcucember=QtWidgets.QListWidgetItem("Четвертый огурец")
        # self.cucembers.addItem(self.fourcucember)
        # #self.onecucember4 = QtWidgets.QListWidgetItem("4")
        # #self.cucembers.addItem(self.onecucember4)
        # self.fivecucember=QtWidgets.QListWidgetItem("Пятый огурец")
        # self.cucembers.addItem(self.fivecucember)
        # #self.onecucember5 = QtWidgets.QListWidgetItem("5")
        # #self.cucembers.addItem(self.onecucember5)
        # self.sixcucember=QtWidgets.QListWidgetItem("Шестой огурец")
        # self.cucembers.addItem(self.sixcucember)
        self.oneb.clicked.connect(verh)
        self.twob_3.clicked.connect(centr)
        self.twob_6.clicked.connect(niz)
        self.qr = []
        self.twob_5.clicked.connect(get_robot_coord)
        self.twob_4.clicked.connect(calc_pos_robot)
        self.twob_8.clicked.connect(moving_to_cucumber)
        # self.twob_7.clicked.connect(toosn)
        for t in ['dark_amber.xml',
                  'dark_blue.xml',
                  'dark_cyan.xml',
                  'dark_lightgreen.xml',
                  'dark_pink.xml',
                  'dark_purple.xml',
                  'dark_red.xml',
                  'dark_teal.xml',
                  'dark_yellow.xml',
                  'light_amber.xml',
                  'light_blue.xml',
                  'light_cyan.xml',
                  'light_cyan_500.xml',
                  'light_lightgreen.xml',
                  'light_pink.xml',
                  'light_purple.xml',
                  'light_red.xml',
                  'light_teal.xml',
                  'light_yellow.xml']:
            self.qr.append(QtWidgets.QAction(t[:-4], self))
            self.qr[-1].triggered.connect(partial(gg, t))

            self.fileMenu.addAction(self.qr[-1])
            self.spinBox_13.setRange(-1000, 1000)
            global ytu

            self.spinBox_14.setRange(-1000, 1000)
            self.spinBox_10.setRange(-1000, 1000)
            self.spinBox_11.setRange(-1000, 1000)
            self.spinBox_12.setRange(-1000, 1000)
            self.spinBox_9.setRange(-1000, 1000)
            self.spinBox_10.setStyleSheet('color:cyan')
            self.spinBox_11.setStyleSheet('color:cyan')
            self.spinBox_12.setStyleSheet('color:cyan')
            self.spinBox_13.setStyleSheet('color:cyan')
            self.spinBox_14.setStyleSheet('color:cyan')
            self.spinBox_9.setStyleSheet('color:cyan')
            self.lineEdit_4.setStyleSheet('color:cyan')
            self.lineEdit_5.setStyleSheet('color:cyan')
            self.lineEdit_6.setStyleSheet('color:cyan')
            self.lineEdit.setStyleSheet('color:cyan')
            self.lineEdit_2.setStyleSheet('color:cyan')
            self.lineEdit_3.setStyleSheet('color:cyan')
            # self.lineEdit_4.setStyleSheet('color:cyan')

            self.twob_7.clicked.connect(toosn)


def get_foto():
    global window
    global rr
    global rr_metric
    try:
        rr, rr_metric = script.get_cucumbers_coordinates()
        window.statusbar.showMessage("Получение фотки завершено", 60000)
        changeimage()
    except:
        window.statusbar.showMessage("Ошибка получения изображения", 60000)


def get_pos_cucumber(which):
    global window
    global ind
    global rr
    global rr_metric
    List1 = rr[ind][which]
    List1_real_mm = rr_metric[ind][which]
    print(List1)
    print(List1_real_mm)
    window.twoniz_2.setText(str(List1)[1:-1])
    window.spinBox_12.setValue(int(List1_real_mm[2]))
    window.spinBox_13.setValue(int(List1_real_mm[1]))
    window.spinBox_14.setValue(int(List1_real_mm[0]))


def verh():
    return get_pos_cucumber('top')


def niz():
    global robot
    set_light_On(robot)
    return get_pos_cucumber('bottom')


def centr():
    return get_pos_cucumber('center')

def set_light_On(self):
    """机器人SetDO测试"""
    error = robot.SetDO(id=0, status=1)
    print("SetDO return ", error)
    time.sleep(10)
    error = robot.SetDO(id=0, status=0)
    print("SetDO return ", error)

def changeimage():
    # твой код

    global window
    global rr
    E = window

    # конец твоего кода
    # Изменеие изображения
    # script.get_cucumbers_coordinates()
    p = QtGui.QPixmap("images/r.png")
    E.imageoutput.setPixmap(p.scaled(511, 741))

    # Вписание коoрдинат огурцов
    # print(rr)
    E.cucembers.clear()
    for ii in rr:
        aa = ""
        for t in ii:
            try:
                tyt = ii[t][0]
                aa += str(ii[t])[1:-1] + "\n"
            except:
                aa += str(ii[t]) + '\n'
        E.cucembers.addItem(aa)


def rashet():
    try:
        global window
        global rr
        global ind
        t = ""
        ind = window.cucembers.row(window.cucembers.currentItem())
        ty = rr[ind]
        aa = ""
        for iii in ty:
            try:
                aa += str(ty[iii]) + "\n"
            except:
                pass

        window.onewerh.setText(aa)
        get_pos_cucumber('top')
    except:
        pass


def toosn():
    global window
    global robot
    x = window.spinBox_10.value() + 0.11579864501953
    y = window.spinBox_9.value() + 0.1173559570312
    z = window.spinBox_11.value() + 0.112925415039

    desc_pos = [x, y, z, 90.32951354980467, 82.1449737548828, 0.3264194428920746]
    print(desc_pos)
    red = robot.MoveCart(desc_pos, 0, 0, 100)
    print(red)

def moving_to_cucumber():
    global window
    global robot
    x = int(window.lineEdit_2.text()) + 0.11579864501953
    y = int(window.lineEdit_4.text()) + 0.1173559570312
    z = int(window.lineEdit_3.text()) + 0.112925415039

    desc_pos_1step = [x, y, z, 90.32951354980467, 82.1449737548828, 0.3264194428920746]
    print("desc_pos_1  " + str(desc_pos_1step))
    red = robot.MoveCart(desc_pos_1step, 0, 0, 100)
    print(red)
    #time.sleep(2)

    y = int(window.lineEdit.text()) + 0.1173559570312
    desc_pos_2step = [x, y, z, 90.32951354980467, 82.1449737548828, 0.3264194428920746]
    print("desc_pos 2 " + str(desc_pos_2step))
    red = robot.MoveCart(desc_pos_2step, 0, 0, 80)
    print(red)


def get_robot_coord():
    global robot
    ret = robot.GetActualTCPPose()
    print(str(ret))
    global window
    window.twoniz.setText(str(ret[1])[1:-1])
    xyz = ret[1]
    window.lineEdit_4.setText(str(int(xyz[1])))
    window.lineEdit_5.setText(str(int(xyz[0])))
    window.lineEdit_6.setText(str(int(xyz[2])))
    calc_pos_robot()


def calc_pos_robot():
    x = int(window.lineEdit_4.text()) - window.spinBox_12.value() + 256
    y = int(window.lineEdit_5.text()) - window.spinBox_14.value() - 23
    z = int(window.lineEdit_6.text()) + window.spinBox_13.value() + 78
    window.lineEdit.setText(str(x))
    window.lineEdit_2.setText(str(y))
    window.lineEdit_3.setText(str(z))


app = QtWidgets.QApplication(sys.argv)  # Новый экземпляр QApplication
ytu = "dark_amber"
apply_stylesheet(app, 'dark_amber.xml')
window = ExampleApp()  # Создаём объект класса ExampleApp
window.show()  # Показываем окно
app.exec_()  # и запускаем приложение


